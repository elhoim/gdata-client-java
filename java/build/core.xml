<project name="core" default="build.core" basedir=".">

  <!-- Path containing core.xml -->
  <dirname property="build_dir" file="${ant.file.core}"/>

<!--  ===================================================================== -->
<!--                      Global targets                                    -->
<!--  ===================================================================== -->   
  <!-- Root build path -->
  <property name="build" value="${build_dir}/../"/>

  
  <!-- Path for generated files -->
  <property name="build.manifest" value="${build}/manifest"/>
  <property name="build.genfiles" value="${build}/genfiles"/>
  <property name="build.genfiles.manifest" value="${build.genfiles}/manifest"/>
  <property name="build.genfiles.meta" value="${build.genfiles}/meta"/>   

  
  <!-- Path for compiled files -->
  <property name="build.classes" value="${build}/classes"/>
  <property name="build.jars" value="${build}/lib"/>

  
  <!-- User properties -->
  <property name="build.properties" value="${build_dir}/build.properties"/>
  <property name="version.properties" value="${build_dir}/version.properties"/>
  <property file="${build.properties}"/>
  <property file="${version.properties}"/>

  
  <!-- ========================= global rules ============================ -->
  
  <!-- create build paths -->
  <target name="dirs">
    <mkdir dir="${build.jars}"/>
    <mkdir dir="${build.classes}"/>
  </target> 
  
  <!-- Generates manifest files with appropriate version information. -->
  <target name="build.manifest">
    <mkdir dir="${build.genfiles.manifest}"/>
    <copy todir="${build.genfiles.manifest}">
      <fileset dir="${build.manifest}">
        <include name="*.manifest"/>
      </fileset>
      <filterset>
        <filtersfile file="${version.properties}"/>
      </filterset>
    </copy>
  </target>   



<!--  =================================================================== -->
<!--                  Template to build service jars                      -->
<!--  =================================================================== -->
  <!-- Dependency path for all services -->
  <path id="build.service.core.classpath">
    <pathelement location="${gdata-client.jar}"/>
  </path>

  <!-- Dependency path for all media enabled services -->
  <path id="build.service.media.classpath">
    <pathelement location="${mail.jar}"/>
    <pathelement location="${activation.jar}"/>
    <pathelement location="${gdata-media.jar}"/>
  </path> 
  

  <!-- Generic template target to build service specific jar 
  Params:
    @param template.service.name    name of the service
    @param template.service.version specification verison for the service.
    @param template.service.includes comma separated list of src paths to 
          relative to "src".  example, for "calendar" its enough to specify
          wildcard representation of service specific package name as 
          "**/calendar/**".  This means the sevice specific code under 
          "com.google.gdata.{data|client}.<service>" will be included.
    @param template.service.excludes comma separated list of src paths or files
          that needs to be excluded from the above include list. Specify "none"
          if nothing to exclude.
    @param template.service.classpath classpath to be used in the javac targets
          to build service specific jar.  gdata-client.jar is included by 
          default.  Specify "none" if there are no additional dependencies.
  -->
  <target name="template.build.service">
    <property name="template.service.meta" 
      value="${build.genfiles.meta}/${template.service.name}"/>
    <property name="template.service.meta.kinds" 
      value="${template.service.meta}/META-INF/gdata/kinds"/>
    <property name="template.service.meta.jar" 
      value="${build.jars}/gdata-${template.service.name}-meta-${template.service.version}.jar"/>
    <property name="template.service.jar" 
      value="${build.jars}/gdata-${template.service.name}-${template.service.version}.jar"/>
    <property name="template.service.classes" 
      value="${build.classes}/${template.service.name}"/>
    <property name="template.service.manifest"
      value="${build.genfiles.manifest}/${template.service.name}.manifest"/>
    
    <!-- Build the meta data for the service -->
    <mkdir dir="${template.service.meta.kinds}"/>
    <apt srcdir="${build.src.gdata}"
            destdir="${template.service.meta.kinds}"
            compile="false"
            factory="com.google.gdata.data.apt.DataAnnotationProcessorFactory"
            includes="${template.service.includes}"
            excludes="${template.service.excludes}">
        <classpath refid="${template.service.classpath}"/>
    </apt>
    <jar destfile="${template.service.meta.jar}">
      <fileset dir="${template.service.meta}">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- Build the service jar -->
    <mkdir dir="${template.service.classes}"/>
    <javac debug="false" sourcepath=""
                         srcdir="${build.src}"
                         destdir="${template.service.classes}"
                         includes="${template.service.includes}"
                         excludes="${template.service.excludes}">
          <classpath>
            <path refid="${template.service.classpath}"/>                 
            <pathelement location="${template.service.meta.jar}"/>
          </classpath>
    </javac>
    <jar destfile="${template.service.jar}"
         basedir="${template.service.classes}"
         manifest="${template.service.manifest}"/>
        
  </target>
 

  <!-- Template to clean generated intermediate files
  Params:
    @param template.service.name service name
  -->
  <target name="template.clean.service">
    <delete dir="${build.classes}/${template.service.name}"/>
    <delete dir="${build.genfiles.meta}/${template.service.name}"/>
  </target>

  <!-- Template to check if Service libs are already built 
  Params:
    @param template.service.name  name of the service
    @param template.service.version specificaiton version for the service
  -->
  <target name="template.require.service.jar">
    <property name="template.service.jar" 
      value="${build.jars}/gdata-${template.service.name}-${template.service.version}.jar"/>     
    <available 
      file="${template.service.jar}" 
      property="has.service.jar"/>
    <fail unless="has.service.jar">
      Missing dependency jar: ${template.service.jar}
      Please run "ant ${template.service.name}.build.${template.service.name}".
    </fail>
  </target>    
  


<!--  ===================================================================== -->
<!--                  Core library targets                                  -->
<!--  ===================================================================== -->     

  <!-- Path for generated files -->
  <property name="gdata-core.manifest"
            value="${build.genfiles.manifest}/core.manifest"/>
  <property name="gdata-client.manifest"
            value="${build.genfiles.manifest}/client.manifest"/>
  <property name="gdata-media.manifest"
            value="${build.genfiles.manifest}/media.manifest"/>    
  <property name="build.genfiles.meta.client" 
            value="${build.genfiles.meta}/client"/>
  <property name="build.genfiles.meta.client.kinds" 
            value="${build.genfiles.meta.client}/META-INF/gdata/kinds"/>
           

  <!-- Path for compiled files -->
  <property name="build.classes.core" value="${build.classes}/core"/>
  <property name="build.classes.client" value="${build.classes}/client"/>
  <property name="build.classes.media" value="${build.classes}/media"/>
  <property name="gdata-core.jar"
            value="${build.jars}/gdata-core-${client.spec.version}.jar"/>
  <property name="gdata-client-meta.jar"
            value="${build.jars}/gdata-client-meta-${client.spec.version}.jar"/>           
  <property name="gdata-client.jar"
            value="${build.jars}/gdata-client-${client.spec.version}.jar"/>
  <property name="gdata-media.jar"
            value="${build.jars}/gdata-media-${media.spec.version}.jar"/>
          
  <!-- Path for source code -->
  <property name="build.src" value="${build}/src"/>
  <property name="build.src.gdata" value="${build.src}/com/google/gdata"/>
  <property name="build.src.gdata.data" value="${build.src.gdata}/data"/>
  <property name="build.src.gdata.client" value="${build.src.gdata}/client"/>

  
  <!-- ===================== core library rules ========================== -->
  <target name="build.core" description="Builds gdata client library">
    <antcall target="build.core.client"/>
    <antcall target="build.core.media"/>
  </target>

  <target name="clean.core" 
      description="Cleans generated files client library">
    <delete dir="${build.classes.core}"/>
    <delete dir="${build.classes.client}"/>
    <delete dir="${build.genfiles.meta.client}"/>
    <delete dir="${build.classes.media}"/>
  </target> 


  <!-- build gdata-core.jar -->
  <target name="build.core.base" depends="dirs,build.manifest">
    <mkdir dir="${build.classes.core}"/>    

    <javac debug="false" sourcepath=""
                         srcdir="${build.src.gdata}"
                         destdir="${build.classes.core}">
      <include name="client/*.java"/>
      <include name="client/batch/**/*.java"/>
      <include name="client/http/**/*.java"/>
      <include name="data/*.java"/>
      <include name="data/acl/**/*.java"/>
      <include name="data/apt/**/*.java"/>
      <include name="data/batch/**/*.java"/>
      <include name="data/geo/**/*.java"/>
      <include name="data/introspection/**/*.java"/>
      <include name="util/**/*.java"/>
      <exclude name="data/MediaContent.java"/>
    </javac>
    <jar destfile="${gdata-core.jar}"
         basedir="${build.classes.core}"
         manifest="${gdata-core.manifest}">
    </jar>     
  </target> 

  
  <!-- build gdata-client-meta.jar -->
  <target name="build.core.client.meta" depends="build.core.base">
    <mkdir dir="${build.genfiles.meta.client.kinds}"/>
    <apt debug="false" sourcepath="" 
            srcdir="${build.src.gdata}" 
            destdir="${build.genfiles.meta.client.kinds}"
            compile="false"
            factory="com.google.gdata.data.apt.DataAnnotationProcessorFactory">
        <classpath> 
          <pathelement location="${gdata-core.jar}"/>
        </classpath>
        <include name="data/extensions/*.java"/>
    </apt>         
    <jar destfile="${gdata-client-meta.jar}">
      <fileset dir="${build.genfiles.meta.client}">
        <include name="META-INF/**"/>
      </fileset>          
    </jar>    
  </target> 

  
  <!-- build gdata-client.jar -->
  <target name="build.core.client" depends="build.core.client.meta">
    <mkdir dir="${build.classes.client}"/>    
    <javac debug="false" sourcepath=""
                         srcdir="${build.src.gdata}"
                         destdir="${build.classes.client}">
        <include name="data/extensions/*.java"/>
        <classpath> 
          <pathelement location="${gdata-core.jar}"/>
          <pathelement location="${gdata-client-meta.jar}"/>
        </classpath>
    </javac>
    <jar destfile="${gdata-client.jar}"
         basedir="${build.classes.client}"
         manifest="${gdata-client.manifest}">
    </jar>     
  </target>


  <!-- build gdata-media.jar -->
  <path id="build.media.classpath">
    <pathelement location="${mail.jar}"/>
    <pathelement location="${activation.jar}"/>
    <pathelement location="${gdata-core.jar}"/>
    <pathelement location="${gdata-client.jar}"/>
  </path> 
  
  <target name="build.core.media" 
      depends="require.client.dependencies,build.core.client">
    <mkdir dir="${build.classes.media}"/>              
    <javac debug="false" sourcepath=""
                         srcdir="${build.src}"
                         destdir="${build.classes.media}">
      <classpath refid="build.media.classpath"/>
      <include name="**/data/MediaContent.java"/>                   
      <include name="**/data/media/**"/>                   
      <include name="**/client/media/**"/>                   
    </javac>
    <jar destfile="${gdata-media.jar}"
         basedir="${build.classes.media}"
         manifest="${gdata-media.manifest}">
    </jar>
  </target>

  <target name="clean.core.media">
    <delete dir="${build.classes.media}"/>
  </target>
 


<!-- ==================== Build Core samples ============================= -->

<!--  ===================================================================== -->
<!--                      Util For Sample Targets                           -->
<!--  ===================================================================== -->
  <property name="sample.core.util.basedir"       value="${build}/sample/util"/>
  <property name="sample.core.util.build.classes" value="${sample.core.util.basedir}/classes"/>
  <property name="sample.core.util.build.lib"     value="${sample.core.util.basedir}/lib"/>
  <property name="sample-util.jar"           value="${sample.core.util.build.lib}/sample-util.jar"/>


  <target name="sample.core.dependencies">
    <available 
      file="${gdata-client.jar}" 
      property="has.client.jar"/>
    <fail unless="has.client.jar">
      Missing dependency jar: ${gdata-client.jar}
      Please run "ant core.build.core.client first".
    </fail>     
  </target> 
  
  
  <path id="sample.core.util.compile.classpath">
    <pathelement location="${gdata-core.jar}"/>
    <pathelement location="${gdata-client.jar}"/>
  </path>

  <target name="sample.core.util.build" depends="sample.core.dependencies">
    <mkdir dir="${sample.core.util.build.classes}"/>
    <javac srcdir="${sample.core.util.basedir}"
           destdir="${sample.core.util.build.classes}"
           debug="false"
           deprecation="false"
           optimize="true">
        <classpath refid="sample.core.util.compile.classpath"/>
    </javac>     
    <mkdir dir="${sample.core.util.build.lib}"/>
    <jar jarfile="${sample-util.jar}"
         basedir="${sample.core.util.build.classes}">
    </jar>
  </target>

  <target name="sample.core.util.clean">
    <delete dir="${sample.core.util.build.classes}"/>
  </target>
   

<!--  ===================================================================== -->
<!--                      Tester Sample Targets                             -->
<!--  ===================================================================== -->
  <property name="sample.core.tester.basedir"       value="${build}/sample/tester"/>
  <property name="sample.core.tester.src.home"      value="${sample.core.tester.basedir}"/>
  <property name="sample.core.tester.build.classes" value="${sample.core.tester.basedir}/classes"/>
  <property name="sample.core.tester.build.lib"     value="${sample.core.tester.basedir}/lib"/>
  <property name="sample.core.tester.jar"           value="${sample.core.tester.build.lib}/TesterClient.jar"/>
  <property name="sample.core.tester.main"          value="sample.tester.Tester"/>

  <target name="sample.core.tester.clean"
   description="Delete old build and dist directories">
    <delete dir="${sample.core.tester.build.classes}"/>
  </target>

  <path id="sample.core.tester.compile.classpath">
    <pathelement location="${gdata-client.jar}"/>
    <pathelement location="${sample-util.jar}"/>
  </path>


  <target name="sample.core.tester.build" depends="sample.core.dependencies">
    <mkdir dir="${sample.core.tester.build.classes}"/>
    <javac srcdir="${sample.core.tester.src.home}"
           destdir="${sample.core.tester.build.classes}"
           debug="false"
           deprecation="false"
           optimize="true">
        <classpath refid="sample.core.tester.compile.classpath"/>
    </javac> 
    
    <mkdir   dir="${sample.core.tester.build.lib}"/>
    <jar jarfile="${sample.core.tester.jar}"
         basedir="${sample.core.tester.build.classes}">
      <manifest>
        <attribute name="Main-Class" value="${sample.core.tester.main}"/>
      </manifest>
    </jar>
  </target>

  <target name="sample.core.tester.run" depends="sample.core.tester.build">
    <java fork="true" classname="${sample.core.tester.main}">
      <arg line="-s ${sample.tester.serviceName} -a ${sample.tester.appName} -f ${sample.tester.feedUrl} -u ${sample.credentials.username} -p ${sample.credentials.password}"/>
      <classpath>
        <path refid="sample.core.tester.compile.classpath"/>
        <path location="${sample.core.tester.jar}"/>
      </classpath>
    </java>
  </target>

  <target name="sample.core.build">
    <antcall target="sample.core.util.build"/>
    <antcall target="sample.core.tester.build"/>
  </target>

  <target name="sample.core.clean">
    <antcall target="sample.core.util.clean"/>
    <antcall target="sample.core.tester.clean"/>
  </target>

  <target name="sample.core.run">
    <antcall target="sample.core.tester.run"/>
  </target>   


<!--  ===================================================================== -->
<!--                      Third party dependency checks                     -->
<!--  ===================================================================== -->
  <!--  Dependencies for media extensions -->
  <target name="require.client.dependencies">
    <available file="${mail.jar}" property="has.sunmail"/>
    <available file="${activation.jar}" property="has.sunactivation"/>
    <fail unless="has.sunmail">missing jar file: ${mail.jar}
The GData client requires Sun's javamail API (version 1.4), which
is not included in this distribution.

You can download it from: 
  http://java.sun.com/products/javamail/downloads/index.html
 
Then save it under: 
  ${mail.jar}
    </fail>
    <fail unless="has.sunactivation">missing jar file: ${activation.jar}
The GData client requires Sun's Activation Framework 1.1, which
is not included in this distribution.

You can download it from: 
 http://java.sun.com/products/javabeans/jaf/downloads/index.html
 
Then save it under: 
  ${activation.jar}
    </fail>    
  </target> 


  <target name="require.servlet-api">
    <available file="${servlet.jar}" property="has.servlet-api"/>
    <fail unless="has.servlet-api">missing jar file: ${servlet.jar}
The recipe example requires Sun's Servlet API (version 2.3 or 2.4), which
is not included in this distribution.

You can download it from: 
 http://java.sun.com/products/servlet/download.html
 Under SPECIFICATIONS/Java Servlet, download 'class files 2.3' from "2.3 - Final Release"
 
Then save it under: 
  ${servlet.jar}
    </fail>
  </target> 

  
</project>
