<?php

/* Load the Zend Gdata classes. */
set_include_path(dirname(__FILE__) . '/ZendGdata-0.9.3/library');
require_once 'Zend/Loader.php';
Zend_Loader::loadClass('Zend_Feed_EntryAtom');
Zend_Loader::loadClass('Zend_Gdata');
Zend_Loader::loadClass('Zend_Gdata_AuthSub');

/* Register namespaces for Google Base ('g') and batch requests ('batch'). */
Zend_Feed::registerNamespace('g', 'http://base.google.com/ns/1.0');
Zend_Feed::registerNamespace('batch', 'http://schemas.google.com/gdata/batch');

/* The items feed URL, used for queries, insertions and batch commands. */
$itemsFeedURL = "http://www.google.com/base/feeds/items";

/* Types of cuisine the user may select when inserting a recipe. */
$cuisines = array('African', 'American', 'Asian', 'Caribbean', 'Chinese',
  'French', 'Greek', 'Indian', 'Italian', 'Japanese', 'Jewish', 
  'Mediterranean', 'Mexican', 'Middle Eastern', 'Moroccan', 
  'North American', 'Spanish', 'Thai', 'Vietnamese', 'Other');

function createOrEditEntry($entry) {
  $newEntry = $entry;

  $newEntry->category['scheme'] = 'http://base.google.com/categories/itemtypes';
  $newEntry->category['term'] = 'Recipes';

  $newEntry->title['type'] = 'text';
  $newEntry->title = $_POST['recipe_title'];

  $newEntry->{'g:cuisine'} = $_POST['cuisine'];
  $newEntry->{'g:item_type'} = 'Recipes';
  $newEntry->{'g:item_type'}['type'] = 'text';

  $newEntry->{'g:cooking_time'} = $_POST['time_val'] . ' ' .
                                  $_POST['time_units'];
  $newEntry->{'g:cooking_time'}['type'] = 'intUnit';

  $newEntry->{'g:main_ingredient'} = $_POST['main_ingredient'];
  $newEntry->{'g:main_ingredient'}['type'] = 'text';

  $newEntry->{'g:serving_count'} = $_POST['serves'];
  $newEntry->{'g:serving_count'}['type'] = 'number';

  $newEntry->content = $_POST['recipe_text'];

  return $newEntry;
}

/**
 * Creates the Zend_Feed_EntryAtom used to insert a new recipe.
 */
function buildNewEntry() {
  return createOrEditEntry(new Zend_Feed_EntryAtom());
}

function buildUpdatedEntry($entry) {
  return createOrEditEntry($entry);
}

/**
 * Creates the XML content used to perform a batch delete.
 */
function buildBatchXML() {
  $counter = 0;

  $result =  '<?xml version="1.0" encoding="UTF-8"?>' . "\n";
  $result .= '<feed xmlns="http://www.w3.org/2005/Atom"' . "\n";
  $result .= ' xmlns:g="http://base.google.com/ns/1.0"' . "\n";
  $result .= ' xmlns:batch="http://schemas.google.com/gdata/batch">' . "\n";
  foreach($_POST as $key => $value) {
    if (substr($key, 0, 5) == "link_") {
      $counter++;

      $newEntry = new Zend_Feed_EntryAtom();
      $newEntry->{'id'} = $value;
      $newEntry->{'batch:operation'}['type'] = 'delete';
      $newEntry->{'batch:id'} = $counter;

      $result .= $newEntry->saveXMLFragment();
    }
  }
  $result .= '</feed>' . "\n";

  return $result;
}

/**
 * Exchanges the given single-use token for a session
 * token using AuthSubSessionToken, and returns the result.
 */
function exchangeToken($token) {
  return Zend_Gdata_AuthSub::getAuthSubSessionToken($token);
}

/**
 * Inserts a new recipe by performing an HTTP POST to the
 * items feed.
 */
function postItem() {
  global $itemsFeedURL;

  $client = Zend_Gdata_AuthSub::getHttpClient($_POST['token']);
  $gdata = new Zend_Gdata($client);
  $response = $gdata->post(buildNewEntry()->saveXML(), $itemsFeedURL);

  return $response;
}

/**
 * Updates an existing recipe by performing an HTTP PUT
 * on its feed URI, using the updated values a PUT data.
 */
function updateItem() {
  global $itemsFeedURL;

  $client = Zend_Gdata_AuthSub::getHttpClient($_POST['token']);
  $gdata = new Zend_Gdata($client);

  $feed = $gdata->getFeed($itemsFeedURL . "?");
  foreach ($feed as $feed_entry) {
    if ($feed_entry->link('edit') == $_POST['link']) {
      $updatedEntry = buildUpdatedEntry($feed_entry);
      $updatedEntry->save();
      return true;
    }
  }
}

/**
 * Deletes a recipe by performing an HTTP DELETE (a custom
 * cURL request) on its feed URI.
 */
function deleteItem() {
  $client = Zend_Gdata_AuthSub::getHttpClient($_POST['token']);
  $gdata = new Zend_Gdata($client);
  $gdata->delete($_POST['link']);
}

/**
 * Deletes all recipes by performing an HTTP POST to the
 * batch URI.
 */
function batchDelete() {
  global $itemsFeedURL;
        
  $client = Zend_Gdata_AuthSub::getHttpClient($_POST['token']);
  $gdata = new Zend_Gdata($client);
  $response = $gdata->post(buildBatchXML(), $itemsFeedURL . "/batch");
    
  return $response;
}

/**
 * We arrive here when the user first comes to the form. The first step is
 * to have them get a single-use token.
 */
function showIntroPage() {
  global $itemsFeedURL;

  $next_url = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'];
  $redirect_url = Zend_Gdata_AuthSub::getAuthSubTokenUri($next_url, $itemsFeedURL, 0,1);

  print '<html>' . "\n";
  print '<head><title>PHP Demo: Google Base API</title>' . "\n";
  print '<link rel="stylesheet" type="text/css" href="../../../css/dev_docs.css">' . "\n";
  print '</head>' . "\n";
  print '<body><center>' . "\n";
  print '<table style="width:50%;">' . "\n";
  print '<tr>' . "\n";
  print '<th colspan="2" style="text-align:center;">PHP Demo: Google Base data API' .
        '<br><font size=-1><span style="font-variant: small-caps;">Powered By</span>' .
        ' <a href="http://framework.zend.com/download/gdata">' .
        'Zend Google Data Client Library</a></font></th>' . "\n";
  print '</tr>' . "\n";
  print '<tr><td>Before you get started, please <a href="' . $redirect_url . 
      '">sign in</a> to your personal Google Base account.</td></tr>' . "\n";
  print '</table>' . "\n";
  print '</center></body></html>' . "\n";
}

/**
 * Prints the table of recipes the user has already entered
 * on the left-hand side of the page.
 */
function showRecipeListPane($token) {
  print '<td style="width:50%; text-align:center; vertical-align:top">' . "\n";
  print '<table>' . "\n";
  print '<tr><th colspan="5" style="text-align:center">Recipes you have added</th></tr>' . "\n";

  global $itemsFeedURL;

  $client = Zend_Gdata_AuthSub::getHttpClient($token);
  $gdata = new Zend_Gdata($client);
  try {
    $feed = $gdata->getFeed($itemsFeedURL . "?");
    if ($feed->count() == 0) {
      print '<tr><td colspan="5" style="text-align:center"><i>(none)</i></td></tr>' . "\n";
    } else {
      print '<tr>' . "\n";
      print '<td style="text-align:center"><i>Name</i></td>' . "\n";
      print '<td style="text-align:center"><i>Cuisine</i></td>' . "\n";
      print '<td style="text-align:center"><i>Serves</i></td>' . "\n";
      print '<td colspan="2" style="text-align:center"><i>Actions</i></td>' . "\n";
      print '</tr>' . "\n";

      foreach ($feed as $feed_entry) {
        $link_list = $feed_entry->link();
        $href = $link_list[0]->getAttribute('href');

        print "<tr>\n";
        print '<td align="left" valign="top"><b><a href="' . $href . '">' .
              $feed_entry->title() . '</a></b></td>' . "\n";
        print '<td style="text-align:center;vertical-align:top">' .
              $feed_entry->cuisine() . '</td>' . "\n";
        print '<td style="text-align:center;vertical-align:top">' .
              $feed_entry->serving_count() . '</td>' . "\n";

        /* Create an Edit button for each existing recipe. */
        print '<td style="text-align:center;vertical-align:top">' . "\n";
        print '<form method="post" action="' . $_SERVER[PHP_SELF] .
              '" style="margin-top:0;margin-bottom:0;">' . "\n";
        print '<input type="hidden" name="action" value="edit">' . "\n";
        print '<input type="hidden" name="token" value="' . $token . '">' . "\n";
        print '<input type="hidden" name="edit" value="' . $feed_entry->id() . '">' . "\n";
        print '<input type="submit" value="Edit">' . "\n";
        print '</form>' . "\n";
        print '</td>' . "\n";

        /* Create a Delete button for each existing recipe. */
        print '<td style="text-align:center; vertical-align:top">' . "\n";
        print '<form method="post" action="' . $_SERVER[PHP_SELF] .
              '" style="margin-top:0;margin-bottom:0;">' . "\n";
        print '<input type="hidden" name="action" value="delete">' . "\n";
        print '<input type="hidden" name="token" value="' . $token . '">' . "\n";
        print '<input type="hidden" name="link" value="' .
              $feed_entry->id() . '">' . "\n";
        print '<input type="submit" value="Delete">' . "\n";
        print '</form>' . "\n";
        print '</td>' . "\n";
        print '</tr>' . "\n";
      }
    }

    /* Create a "Delete all" button" to demonstrate batch requests. */
    print '<tr><td colspan="5" style="text-align:center">' . "\n";
    print '<form method="post" action="' . $_SERVER[PHP_SELF] .
      '" style="margin-top:0;margin-bottom:0">' . "\n";
    print '<input type="hidden" name="action" value="delete_all">' . "\n";
    print '<input type="hidden" name="token" value="' . $token . '">' . "\n";

    $i = 0;
    foreach ($feed as $feed_entry) {
      print '<input type="hidden" name="link_' . $i . '" value="' .
            $feed_entry->id() . '">' . "\n";
      $i++;
    }

    print '<input type="submit" value="Delete All"';
    if ($feed->count() == 0) {
      print ' disabled="true"';
    }
    print '></form></td></tr>' . "\n";
    print '</table>' . "\n";
    print '</td>' . "\n";
  } catch (Exception $e) {
    showMainMenu("Error: " . $e->getMessage(), $token);
  }
}

/**
 * Prints a small form allowing the user to insert a new
 * recipe.
 */
function showRecipeInsertPane($token) {
  global $cuisines;

  print '<td valign="top" width="50%">' . "\n";
  print '<table width="100%">' . "\n";
  print '<tr><th colspan="2" style="text-align:center">Insert a new recipe</th></tr>' . "\n";
  print '<form method="post" action="' . $_SERVER[PHP_SELF] . '">' . "\n";
  print '<input type="hidden" name="action" value="insert">' . "\n";
  print '<input type="hidden" name="token" value="' . $token . '">' . "\n";
  print '<tr><td align="right">Title:</td>' . "\n";
  print '<td><input type="text" name="recipe_title" class="half">' .
        '</td></tr>' . "\n";
  print '<tr><td align="right">Main ingredient:</td>' . "\n";
  print '<td><input type="text" name="main_ingredient" class="half">' .
        '</td></tr>' . "\n";
  print '<tr><td align="right">Cuisine:</td>' . "\n";
  print '<td><select name="cuisine" class="half">' . "\n";

  foreach ($cuisines as $curCuisine) {
    print '<option value=' . $curCuisine . '>' . $curCuisine .
          '</option>' . "\n";
  }

  print '</select></td></tr>' . "\n";
  print '<tr><td align="right">Cooking Time:</td>' .
    '<td><input type="text" name="time_val" size=2 maxlength=2>&nbsp;' .
    '<select name="time_units"><option value="minutes">minutes</option>' .
    '<option value="hours">hours</option></select></td></tr>' . "\n";
  print '<tr><td align="right">Serves:</td>' . "\n";
  print '<td><input type="text" name="serves" size=2 maxlength=3></td></tr>' .
    "\n";
  print '<tr><td align="right">Recipe:</td>' . "\n";
  print '<td><textarea class="full" name="recipe_text"></textarea></td></tr>' .
    "\n";
  print '<td>&nbsp;</td><td><input type="submit" value="Submit"></td>' . "\n";
  print '</form></tr></table>' . "\n";
  print '</td>' . "\n";
}

/**
 * Shows a menu allowing the user to update an existing
 * recipe with the Base API update feature.
 */
function showEditMenu() {
  global $cuisines, $itemsFeedURL;

  $client = Zend_Gdata_AuthSub::getHttpClient($_POST['token']);
  $gdata = new Zend_Gdata($client);

  try {
    $feed = $gdata->getFeed($itemsFeedURL . "?");
    foreach ($feed as $feed_entry) {
      if ($feed_entry->link('edit') == $_POST['edit']) {
        $splitCookingTime = split(" ", $feed_entry->cooking_time());

        print '<html>' . "\n";
        print '<head><title>PHP Demo: Google Base API</title>' . "\n";
        print '<link rel="stylesheet" type="text/css"' .
              ' href="../../../css/dev_docs.css">' . "\n";
        print '</head>' . "\n";
        print '<body><center>' . "\n";

        print '<table style="width:50%">' . "\n";
        print '<tr><th colspan="2" style="text-align:center">Edit recipe:</th></tr>' . "\n";

        print '<form method="post" action="' . $_SERVER[PHP_SELF] . '">' . "\n";
        print '<input type="hidden" name="action" value="update">' . "\n";
        print '<input type="hidden" name="link" value="' .
              $_POST['edit'] . '">' . "\n";
        print '<input type="hidden" name="token" value="' .
              $_POST['token'] . '">' . "\n";

        print '<tr><td align="right">Title:</td>' . "\n";
        print '<td><input type="text" name="recipe_title" class="half" value="' .
              $feed_entry->title() . '"></td></tr>' . "\n";

        print '<tr><td align="right">Main ingredient:</td>' . "\n";
        print '<td><input type="text" name="main_ingredient" value="' .
              $feed_entry->main_ingredient() . '" class="half"></td></tr>' . "\n";

        print '<tr><td align="right">Cuisine:</td>' . "\n";
        print '<td><select name="cuisine" class="half">' . "\n";

        foreach ($cuisines as $curCuisine) {
          print '<option value="' . $curCuisine . '"';
          if ($curCuisine == $feed_entry->cuisine()) {
            print ' selected="selected"';
          }
          print '>' . $curCuisine . "</option>\n";
        }

        print '</select></td></tr>' . "\n";
        print '<tr><td align="right">Cooking Time:</td>' .
          '<td><input type="text" name="time_val" size=2 maxlength=2 value="' .
          $splitCookingTime[0] . '">&nbsp;' . "\n";
        print '<select name="time_units">' . "\n";
        if ($splitCookingTime[1] == "minutes") {
          print '<option value="minutes" selected="selected">minutes</option>' .
            "\n";
          print '<option value="hours">hours</option>' . "\n";
        } else {
          print '<option value="minutes">minutes</option>' . "\n";
          print '<option value="hours" selected="selected">hours</option>' .
            "\n";
        }

        print '</select></td></tr>' . "\n";
        print '<tr><td align="right">Serves:</td>' . "\n";
        print '<td><input type="text" name="serves" value="' .
              $feed_entry->serving_count() . '" size=2 maxlength=3></td></tr>' . "\n";

        print '<tr><td align="right">Recipe:</td>' . "\n";
        print '<td><textarea class="full" name="recipe_text">' .
              $feed_entry->content() . '</textarea></td></tr>' . "\n";
        print '<td>&nbsp;</td><td><input type="submit" value="Update"></td>' . "\n";
        print '</form></tr></table>' . "\n";
        print '</body></html>' . "\n";

        break;
      }
    }
  } catch (Exception $e) {
    showMainMenu($e->getMessage(), $_POST['token']);
  }
}

/**
 * Displays both the "List of current recipes" and
 * "Insert a new recipe" panels in a single table.
 */
function showMainMenu($tableTitle, $sessionToken) {
  print '<html>' . "\n";
  print '<head><title>PHP Demo: Google Base API</title>' . "\n";
  print '<link rel="stylesheet" type="text/css" href="../../../css/dev_docs.css">' . "\n";
  print '</head>' . "\n";
  print '<body><center>' . "\n";
  print '<table style="width: 75%;text-align:center">' . "\n";
  print '<tr>' . "\n";
  print '<th colspan="2" style="text-align:center;">PHP Demo: Google Base data API' .
        '<br><font size=-1><span style="font-variant: small-caps;">Powered By</span>' .
        ' <a href="http://framework.zend.com/download/gdata">' .
        'Zend Google Data Client Library</a></font></th>' . "\n";
  print '</tr>' . "\n";
  print '<tr><td colspan="2" align="center">' . $tableTitle .
        '</td></tr>' . "\n";
  print '<tr>' . "\n";

  // Create the two sub-tables.
  showRecipeListPane($sessionToken);
  showRecipeInsertPane($sessionToken);

  // Add a "Sign out" link.
  print '<tr><th colspan="2" style="text-align: center">Or click here to' .
    ' <a href="http://www.google.com/accounts/Logout">sign out</a>' .
    ' of your Google account.</th></tr>' . "\n";

  // Close the master table.
  print '</table>' . "\n";
  print '</center></body></html>' . "\n";
}

/**
 * We arrive here after the user first authenticates and we get back
 * a single-use token.
 */
function showFirstAuthScreen() {
  global $gdata;

  $singleUseToken = $_GET['token'];
  $sessionToken = exchangeToken($singleUseToken);

  if (!$sessionToken) {
    showIntroPage();
  } else {
    $tableTitle =
      'Here\'s your <b>single use token:</b> <code>' . $singleUseToken .
      '</code>' . "\n" . '<br>And here\'s the <b>session token:</b> <code>' .
      $sessionToken . '</code>';
    
      showMainMenu($tableTitle, $sessionToken);
  }
}

/**
 * Main logic. Take action based on the GET and POST
 * parameters, which reflect whether the user has
 * authenticated and which action they want to perform.
 */
function handlePost() {
  try {
    $post_response = postItem();
    if ($post_response->isSuccessful()) {
      showMainMenu('Recipe inserted!', $_POST['token']);
    } else {
      showMainMenu('Recipe insertion failed: ' . $post_response->getMessage(),
                   $_POST['token']);
    }
  } catch (Exception $e) {
    showMainMenu('Recipe insertion failed: ' . $e->getMessage(), $_POST['token']);
  }
}

function handleDelete() {
  try {
    deleteItem();
    showMainMenu('Recipe deleted.', $_POST['token']);
  } catch (Exception $e) {
    showMainMenu('Recipe deletion failed: ' . $e->getMessage(), $_POST['token']);
  }
}

function handleBatch() {
  try {
    $batch_response = batchDelete();
    if ($batch_response->isSuccessful()) {
      showMainMenu('All recipes deleted.', $_POST['token']);
    } else {
      showMainMenu('Batch deletion failed: ' . $batch_response->getMessage(),
                   $_POST['token']);
    }
  } catch (Exception $e) {
    showMainMenu('Batch deletion failed: ' . $e->getMessage(),
                 $_POST['token']);
  }
}

function handleUpdate() {
  try {
    if (updateItem()) {
      showMainMenu('Recipe successfully updated.', $_POST['token']);
    } else {
      showMainMenu('Recipe update failed.', $_POST['token']);
    }
  } catch (Exception $e) {
    showMainMenu('Recipe update failed: ' . $e->getMessage(),
                 $_POST['token']);
  }
}

if (count($_GET) == 1 && array_key_exists('token', $_GET)) {
  showFirstAuthScreen();
} else {
  if (count($_POST) == 0) {
    showIntroPage();
  } else {
    if ($_POST['action'] == 'insert') {
      handlePost();
    } else if ($_POST['action'] == 'delete') {
      handleDelete();
    } else if ($_POST['action'] == 'delete_all') {
      handleBatch();
    } else if ($_POST['action'] == 'edit') {
      showEditMenu();
    } else if ($_POST['action'] == 'update') {
      handleUpdate();
    } else {
      showIntroPage();
    }
  }
}

?>
